Jupyter Notebook
ders-Copy1
Last Checkpoint: 31.12.2018
(autosaved)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help


fin=open("C:\\Saha\\words.txt")

def words(word,a):
    wordcount=0
    linecount=0
    for line in word:
        if len(line.strip())==a:
            wordcount+=1
        linecount+=1
    return wordcount

words(fin,10)
0

fin=open("C:\\Saha\\words.txt")
for i in range(1,23):
    x=words(fin,i)
    print(x)
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0

​
for i in range(1,23):
    fin=open("C:\\Saha\\words.txt")
    x=words(fin,i)
    print(x)
0
0
85
908
3686
8258
14374
21727
26447
16658
9199
5296
3166
1960
1023
557
261
132
48
16
5
3

fin=open("C:\\Saha\\words.txt")
for i in range(1,23):
    fin.seek(0,0) #dosyanın her seferinde başına gider
    x=words(fin,i)
    print(x)
0
0
85
908
3686
8258
14374
21727
26447
16658
9199
5296
3166
1960
1023
557
261
132
48
16
5
3

fin=open("C:\\Saha\\words.txt")
y=[]
for i in range(1,23):
    fin.seek(0,0)
    x=words(fin,i)
    y.append(words(fin,i))
y
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

fin=open("C:\\Saha\\words.txt")
z=dict()
for i in range(1,23):
    fin.seek(0,0)
    z[i]=words(fin,i)
z
{1: 0,
 2: 85,
 3: 908,
 4: 3686,
 5: 8258,
 6: 14374,
 7: 21727,
 8: 26447,
 9: 16658,
 10: 9199,
 11: 5296,
 12: 3166,
 13: 1960,
 14: 1023,
 15: 557,
 16: 261,
 17: 132,
 18: 48,
 19: 16,
 20: 5,
 21: 3,
 22: 0}

file1=open("C:/Saha/output.txt","w")

line1="this is the first line\n"

file1.write(line1)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-aca865967b4e> in <module>()
----> 1 file1.write(line1)

NameError: name 'file1' is not defined


line2="this is the second line\n"

file1.write(line2)
24

file1.close()

import random as rm

file=open("C:/Saha/randoms.txt","w")

r=[]
for i in range(0,10):
    x=rm.random()
    print(x)
    r.append(x)
0.2933134174290615
0.11718235166910185
0.5454873423439629
0.3575434256667819
0.1011296982117853
0.7377007688684228
0.29243614050203703
0.06136429304178137
0.3097901377538613
0.3595908559395118

file3=open("C:/Saha/randomnmbers.txt","w")

file3.write(str(r))
file3.close()

file3=open("C:/Saha/randomnmbers.txt","w")
for i in range(0,10):
    x=rm.random()
    print(x) #sadece görmek için yazdırdık
    file3.write("%g \n" % x) #floating format 
0.49845049128241137
0.9746643591462032
0.05574098366979896
0.9515566605439084
0.20134550524532369
0.12246813518380617
0.19718085621853687
0.3605492124291958
0.29354005939852756
0.32930544368282244

file3.close()

# https://docs.python.org/3/library/stdtypes.html

file3=open("C:/Saha/randomnmbers.txt","w")
for i in range(0,10):
    x=rm.random()
    print(x) #sadece görmek için yazdırdık
    file3.write("%E \n" % x) # hesap makinesindeki e fonksiyonu gibi yazar
file3.close()
0.3043457539151697
0.43673627627218714
0.8526960767082788
0.2838777564727132
0.1809313666900899
0.10028190912088886
0.15783729461082485
0.3152235745489438
0.7981769365072465
0.34964641146911346

file3=open("C:/Saha/randomnmbers.txt","w")
for i in range(0,10):
    x=rm.random()
    print(x) #sadece görmek için yazdırdık
    file3.write("%s \n" % x) #ne görmüssek yazdırmak içindir sayı özelliği bozulmaz
file3.close()
0.5866769797696402
0.6425241297224065
0.7988848453790285
0.14991310816157655
0.5107807883323524
0.7912791292918279
0.10845449747899849
0.7698028052381735
0.6916638057025463
0.9599422659040301

​


ders 2



Jupyter Notebook
ders2
Last Checkpoint: 31.12.2018
(autosaved)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help


file=open("C:/Saha/randomnumbers.txt","w")

import random as rm

for i in range(0,10):
    x=rm.random()
    print(x)
    file.write("%E\n" % x) #E ile kastedilen syntific formattır sorularda başka türlüde isteyebilir f ile yazarsakta kücük yuvarlanmış şekild verir.bir önceki dersteki sayfaya bak
    
    
0.6805294306252778
0.5605024925228604
0.8781065209087917
0.2296315721129939
0.7715346131644293
0.4558868955294946
0.7334489657608345
0.5302622490679332
0.8099348669818701
0.8008932750962907

file.close()

file=open("C:/Saha/randomnumbers.txt","a") # a yazınca üstüne append yapar
for i in range(0,10):
    x=rm.random()
    print(x)
    file.write("%E\n" % x)
​
0.2741655714720914
0.05125938206293679
0.9622644010401671
0.4049453866697358
0.7476944288069803
0.47422125870217713
0.22106065756158855
0.2466330925226885
0.1869530877194271
0.6688039693401469

file.close()

f1=open("C:/Saha/hello.txt","a")
f1.write("hello w \n")
9

f1.close()

f1=open("C:/Saha/hello.txt","a")
f1.write("heloooo ag \n")
12

f1.close()

with open("C:/Saha/hello.txt","r") as myfile:
    data=myfile.readlines()
data
['hello w \n', 'heloooo ag \n']

with open("C:/Saha/hello.txt","r") as myfile:  # r ile read yaparız.
    for line in myfile:  
        print(line)
hello w 

heloooo ag 


import statistics as st
import random as rm

x=[]
for i in range (0,10):
    y=rm.random()
    x.append(y)
    

x  # verinin modu yok
[0.7069947159528627,
 0.11412560074329847,
 0.12808369058642577,
 0.8077615269140742,
 0.04372354487475816,
 0.9143983063184319,
 0.6861396227795742,
 0.34027506279102127,
 0.7063154482139125,
 0.9114327759270195]

st.mean(x)
​
0.5359250295101379

st.median(x)
​
0.6962275354967433

st.stdev(x)
0.34380159870229365

st.variance(x)
0.11819953927025295

# https://docs.python.org/3/library/statistics.html

x=[]
for i in range(0,100):
    y=rm.randint(0,100)
    x.append(y) # x'e sakladık

#min-max normalizasyonu x-min(x)/max(x)-min(x)

a=min(x)
b=max(x)
nz=list()

for i in range(0,len(x)):
    nz.append((x[y]-a)/(b-a))

nz
[73,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735]

#veya
for y in x:
    nz.append((y-a)/(b-a))

nz
[73,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.7448979591836735,
 0.5510204081632653,
 0.41836734693877553,
 0.14285714285714285,
 0.5306122448979592,
 0.7448979591836735,
 0.826530612244898,
 0.6122448979591837,
 0.9387755102040817,
 0.9693877551020408,
 0.0,
 0.6836734693877551,
 0.46938775510204084,
 0.4387755102040816,
 0.3673469387755102,
 0.46938775510204084,
 0.7346938775510204,
 0.3979591836734694,
 0.08163265306122448,
 0.25510204081632654,
 0.25510204081632654,
 0.42857142857142855,
 0.2857142857142857,
 0.05102040816326531,
 0.3673469387755102,
 0.7959183673469388,
 0.5306122448979592,
 0.9795918367346939,
 0.7959183673469388,
 0.6632653061224489,
 0.25510204081632654,
 0.19387755102040816,
 0.8877551020408163,
 0.8163265306122449,
 0.6020408163265306,
 0.8571428571428571,
 0.0,
 0.46938775510204084,
 0.9081632653061225,
 0.4387755102040816,
 0.45918367346938777,
 0.8775510204081632,
 0.37755102040816324,
 0.12244897959183673,
 0.9183673469387755,
 0.7142857142857143,
 0.07142857142857142,
 0.17346938775510204,
 0.030612244897959183,
 0.7040816326530612,
 0.8367346938775511,
 0.19387755102040816,
 0.05102040816326531,
 0.7244897959183674,
 0.4489795918367347,
 0.9795918367346939,
 0.4897959183673469,
 0.0,
 0.30612244897959184,
 0.6632653061224489,
 0.24489795918367346,
 0.5510204081632653,
 0.2755102040816326,
 0.25510204081632654,
 0.7857142857142857,
 0.22448979591836735,
 0.24489795918367346,
 0.3469387755102041,
 0.3163265306122449,
 1.0,
 0.19387755102040816,
 0.9897959183673469,
 0.8163265306122449,
 0.9693877551020408,
 0.8979591836734694,
 0.24489795918367346,
 0.37755102040816324,
 0.8163265306122449,
 0.7142857142857143,
 0.5510204081632653,
 0.9897959183673469,
 0.6428571428571429,
 0.37755102040816324,
 0.7653061224489796,
 0.9387755102040817,
 0.8061224489795918,
 0.7959183673469388,
 0.21428571428571427,
 0.42857142857142855,
 0.32653061224489793,
 0.09183673469387756,
 0.3469387755102041,
 0.5816326530612245,
 0.6326530612244898,
 0.5612244897959183,
 0.5612244897959183,
 0.4387755102040816,
 0.08163265306122448,
 0.8571428571428571,
 0.7244897959183674,
 0.04081632653061224]

​


Jupyter Notebook
ders3
Last Checkpoint: 31.12.2018
(autosaved)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help


import statistics as st

x=[45,23,6,-90,34,111]

#min max normalization
a=min(x)
b=max(x)
nz=list()
for y in range(0,len(x)):
    nz.append((x[y]-a)/(b-a))
nz
[0.6716417910447762,
 0.5621890547263682,
 0.47761194029850745,
 0.0,
 0.6169154228855721,
 1.0]

#ikinci yol
a=min(x)
b=max(x)
nz=[]
for y in x:
    nz.append((y-a)/(b-a))
nz
[0.6716417910447762,
 0.5621890547263682,
 0.47761194029850745,
 0.0,
 0.6169154228855721,
 1.0]

nz=[]
def mmx(alist):
    a=min(alist)
    b=max(alist)
    for y in alist:
        nz.append((y-a)/(b-a))
    return nz

mmx(x)
[0.6716417910447762,
 0.5621890547263682,
 0.47761194029850745,
 0.0,
 0.6169154228855721,
 1.0]

y=[45,50,48,54,44,78,12]

mmx(y)
[0.6716417910447762,
 0.5621890547263682,
 0.47761194029850745,
 0.0,
 0.6169154228855721,
 1.0,
 0.5,
 0.5757575757575758,
 0.5454545454545454,
 0.6363636363636364,
 0.48484848484848486,
 1.0,
 0.0]

def z_score(mylist):
    import statistics as st
    c=[]
    a=st.mean(mylist)
    b=st.stdev(mylist)
    for y in mylist:
        c.append((y-a)/b)
    return c

z_score(x)
[0.3592625463474177,
 0.022931651894516025,
 -0.23696040290999892,
 -1.7045861241590246,
 0.19109709912096687,
 1.3682552297061228]

def normalization(mylist,method=1):
    if method==1:
        a=min(mylist)
        b=max(mylist)
        nz=[]
        for y in mylist:
            nz.append((y-a)/(b-a))
        return nz
    elif method==2:
        import statistics as st
        c=[]
        a=st.mean(mylist)
        b=st.stdev(mylist)
        for y in mylist:
            c.append((y-a)/b)
        return c
    else:
        print("method 1 veya 2 seçilebilir")
        return
    

normalization(x,1)
[0.6716417910447762,
 0.5621890547263682,
 0.47761194029850745,
 0.0,
 0.6169154228855721,
 1.0]

normalization(x,2)
[0.3592625463474177,
 0.022931651894516025,
 -0.23696040290999892,
 -1.7045861241590246,
 0.19109709912096687,
 1.3682552297061228]

def normalization_2(mylist,method=1):
    if method==1:
        l=mmx(mylist)
        return l
    elif method==2:
        i=z_score(mylist)
        return i
    else:
        print("method 1 veya 2 seçilebilir")
        return

del(y)

x=[12,45,874,587,45]

def normalization_2(zlist,method=1):
    if method==1:
        l=mmx(zlist)
        return l
    elif method==2:
        i=z_score(zlist)
        return i
    else:
        print("method 1 veya 2 seçilebilir")
        return

def descriptive(x,dec=3):
    import statistics as st
    xbar=round(st.mean(x),dec)
    median=st.median(x)
    s=round(st.stdev(x),dec)
    var=(st.variance(x),dec)
    n=len(x)
    #dictionary
    d={"mean": xbar,"stdev":s,"variance":var,"median":median,"n":n}
    return d
    

?dict

z=[54,54,5654,6,7,98,45,4]

descriptive(z,4)
{'mean': 740.25,
 'stdev': 1985.7175,
 'variance': (3943073.9285714286, 4),
 'median': 49.5,
 'n': 8}

f1=open("C:/Saha/desc.txt","w") #w yada a kullanılabilir

f1.write(str(descriptive(z,5)))
f1.close()

#dosyaya yazmak için str olarak yazmak gerek

#rassal veri üretme dictiorny dosyaya yazma fonskiyon yazma print fload str döngüler 

